{"name":"Newlang","tagline":"A language with some influence from Python and a lot from Smalltalk, but compiled and that runs natively without a virtual machine.","body":"**_This is a work in progress, anything defined here can be modified in the future_**\r\n\r\n## Features of the language\r\n\r\n#### Multiparadigm\r\nAt least Object-oriented, Functional and Structured (in that order of importance).\r\n\r\n#### Strong typed\r\nTypes must be explicit, never implicit. (nothing like \"auto\" in C++ or \":\\*\" in AS3)\r\n\r\n#### Whitespace matters\r\nTabulation mark code blocks (like Python), use of 4 spaces for tabulation is required, tabs or other spacing are forbidden, extra empty lines between statements are forbidden also.\r\n\r\n#### Statement terminator\r\nIn some languages each statement is finished by a character, in C-family they use a semicolon (';'), in Python the new line ('\\n') is used, but in this language we will use a dot ('.') just like in the most spoken languages (and Smalltalk).\r\n\r\n#### No exceptions\r\nIf a process fails for any reason it terminates the program with a human readable message.\r\n\r\n#### All objects are first-class objects\r\nBlocks of code (functions, methods, lambdas) and Type definitions (classes) are first-class objects and had methods of their own.\r\n\r\n#### \"Objects are discrete, self-contained, combinations of code and data\"\r\nAll the data is private, accessible only by code of the same object. All the code is public, accessible by everyone.\r\n\r\n#### Objects receive messages like Smalltalk\r\n```\r\nobject message.\r\nobject message: param.\r\n```\r\n\r\n#### Conditionals and loops\r\nAre not part of the language, they are implemented as messages to objects (like Smalltalk)\r\n\r\n```\r\nboolean ifTrue: block.      # Branches (if)\r\nboolean ifFalse: block.\r\n```\r\n\r\n```\r\nblock1 whileTrue: block2.   # Loops (while)\r\nblock1 whileFalse: block2.\r\n```\r\n\r\n```\r\n1 to: 10 do: block.         # Range-loops (for)\r\nbegin to: end do: block.\r\n```\r\n\r\n#### Initialization is required. Always\r\nYou can't define a variable, you must always declare it (give it a type and a value), i.e. in C you can write the following:\r\n```C\r\nint a;\r\na = 10;\r\n```\r\nor this:\r\n```C\r\nint aVeryLongVariableName;\r\nint aVeriLongVariableName = func(aVeriLongVariableName);\r\n```\r\n\r\nBecause pieces of code like those brought pain to me and are just to difficult to debug, a definition without an initialization will be illegal. For more details see **Variables** in the code examples below.\r\n\r\n## Nice to have\r\n\r\n* Every object must have an 'id', a unique number that represents that object in memory and can be used to check if two objects are the same.\r\n* Iterating through a collection make that collection 'sealed'. You can't change a collection while you are iterating through it.\r\n* Abstract classes and abstract methods. (complete and partial interfaces)\r\n* Compilation must be \"incremental\". You pass 1 file to the compiler and only compile the files that are imported in the first file, then compile the ones that are imported in the imported files and so on. Never compile something that is not part of the objects and functions used by a program, even the \"standard\" objects. If a Boolean is never used, it is never compiled.\r\n* Automatic memory management, but without a garbage collector.\r\n* No pointers.\r\n* Unless \"global\" return values are returned not by copy, but by moving.\r\n* Standard functions:\r\n * abort(\"str\"): prints \"str\" and terminate the program.\r\n * assert(bool, \"str\"): if bool is false call abort(\"str\").\r\n* Standard objects:\r\n * StandardAllocator: manage memory like C.\r\n * DynamicPoolAllocator: manage memory like a dynamic growing pool.\r\n * FixedSizePoolAllocator: manage memory like a pool, but it have a fixed size pool.\r\n\r\n## Naming requirements\r\nThe names of all types, variables and messages (functions names) must comply with the following rules:  \r\n 1. The use of '\\_' is forbidden, only letters ('a' to 'z' and 'A' to 'Z') and digits (0 to 9) can be used.\r\n 2. All types must start with uppercase letters and follow the `CamelCase` style.\r\n```\r\nGoodType.\r\nbadType.\r\nOTHERBadType.\r\n```\r\n 3. All variables and messages must start with lowercase letters and follow the `camelCase` style.\r\n```\r\naGoodName.\r\nanotherGoodName.\r\nBadVariableName.\r\na_bad_name.\r\nREALLY_BAD_NAME.\r\n```\r\n\r\n## Code examples\r\n\r\n#### Comments\r\nEvery line starting with a `#` is a comment:\r\n\r\n```\r\n# Line comments like Python.\r\n# No multi line comments\r\n```\r\n\r\nThis allow the use of [shebang](http://en.wikipedia.org/wiki/Shebang_(Unix))\r\n\r\n#### Values (or primitives)\r\n\r\n```\r\n123                 # Integer Number\r\n123,34              # Real Number, digits are separated with a comma\r\n\"string\"            # Strings are enclosed in double quotes\r\n```\r\n\r\n\r\n#### Variables\r\nSimple declarations:\r\n```\r\nObject anObject = anotherVariable.\r\nNumber aNumber = 123.\r\nString aString = 'a string'.\r\n```\r\n\r\nInitialized with the return value of a block of code:\r\n```\r\nObject a = anObject message.\r\nObject b = anObject message: param.\r\nObject c = anObject message: param1 with: param2.\r\n```\r\n\r\nAny Type and any block of code are first-class objects, so they can be assigned to any variable:\r\n```\r\nType aType = String.\r\nBlock<Void> aBlock = [].    # this is illegal, see below for Block\r\n```\r\n\r\nDeclaration errors:\r\n```\r\nObject anObject.        # ERROR: A variable without an initialization is illegal...\r\nObject anObject = null. # ...but you can initialize it to null.\r\n\r\nObject var = anObject message: var. # ERROR: 'var' is not defined yet, can't be used.\r\n\r\nNumber aNumber = 123.   # Good.\r\nNumber aNumber = 456.   # ERROR: can't redefine a variable...\r\naNumber = 789.          # ...but you can change it's value.\r\n\r\nNumber aNumber = 123.   # Good.\r\nString aNumber = 'str'. # ERROR: can't redefine a variable, nor change it's type.\r\n\r\nString aString = 123.               # ERROR: assigning an incompatible type...\r\nString aString = 123 asString.      # ...but you can get the correct type from a value...\r\nString aString = aNumber asString.  # ...or from another variable.\r\n```\r\n\r\n## Standard Types\r\n\r\n#### Number\r\nAt the moment we will use it just like a `long double` in C. This is the only numeric type and any literal is an object, so code like this is valid:\r\n```\r\nNumber two = 2.\r\nNumber four = 4.\r\nNumber eight = two times: four.\r\n\r\nNumber two = 2.\r\nNumber eight = two times: 4.\r\n\r\nNumber four = 4.\r\nNumber eight = 2 times: four.\r\n\r\nNumber eight = 2 times: 4.\r\n```\r\n\r\nReals use the comma (',') as the decimal point:\r\n```\r\nNumber pi = 3,1415.\r\nNumber twoPi = 3,1415 times: 2.\r\n```\r\n\r\n#### String\r\nOnly text type, there is no notion of _char_. As with `Number` any literal string is also of this type, so code like this is valid:\r\n```\r\nString aString = \"Hello World!\".\r\n\r\nNumber aLength = aString length.\r\nNumber anotherLength = \"Hello World!\" length.\r\n```\r\n\r\nStrings must are enclosed in double quotes (\") never in single quotes ('). To write a double quote character inside a string just escape it with a backslash (\\\\) like this: \"\\\\'\" and to write a backslash character write it twice like this \"\\\\\\\\\", those are the only two exceptions.\r\n\r\n\r\n#### Boolean\r\nThere are only 2 instances of this type: `true` and `false`. Some operations return a `Boolean` and can be used as any other object:\r\n```\r\nString aString = 'Hello World!'.\r\nBoolean hasWorld = aString contains: 'World'.\r\n```\r\n\r\nSome methods:\r\n```\r\nBlock doSomething = [].     # illegal, see below for Block\r\nBlock doSomethingElse = []. # illegal, see below for Block\r\n\r\nBoolean isNew = true.\r\nBoolean isOdd = 4 isOdd.\r\n\r\n# Conditionals\r\nisNew ifTrue: doSomething.\r\nisNew ifFalse: doSomethingElse.\r\n(isNew ifTrue: doSomething) ifFalse: doSomethingElse.\r\n\r\n# Operators\r\nBoolean newOrOdd = isNew or: isOdd.\r\nBoolean newAndOdd = isNew and: isOdd.\r\nBoolean newXorOdd = isNew xor: isOdd.\r\nBoolean notNew = isNew not.\r\n```\r\n\r\n#### Block\r\nA block of executable code: _function_, _method_ or _lambda_ as seen in other languages.\r\n\r\nYou can define a block of code anywhere in the source code. Blocks of code are first-class objects so think of it as any other variable or literal like String or Number but with a specific syntax: first it's type `Block` then enclosed in angle brackets ('<' and '>') the return type and then the type of each parameter separated by comma:\r\n```\r\nBlock<Void> aBlock.     # returns nothing and recieve nothing.\r\nBlock<Number> aBlock.   # returns a Number and recieve nothing.\r\nBlock<Void, Number> aBlock.     # returns nothing and recieve a Number.\r\nBlock<Number, Number> aBlock.   # returns a Number and recieve a Number.\r\n```\r\n\r\nThat defines the type of a block and it's name, but not the code itself, for that, in a new line you must define it's body and always enclosed in square brackets '[' and ']' and finalize it with a dot '.':\r\n```\r\nBlock<Void> aBlock\r\n    [ String a = \"Hello World\". ].\r\n\r\nBlock<Number> random\r\n    [ 4. ].\r\n```\r\n\r\nYou can see that blocks has no `return` statement, that's because any block of code return the value of it's last statement. So `aBlock` will return the string \"Hello World\" and `random` will return 4.\r\n\r\nThe new line between a block definition and it's body is mandatory. Also the indentation must be increased. Here some examples:\r\n```\r\nBlock<Void> aBlock [ String a = \"Hello World\". ].   # ERROR: No new line between 'aBlock' and '['\r\n\r\nBlock<Number> random\r\n[ 4. ].                 # ERROR: Indentation is erroneous...\r\n    [ 4. ].             # ...this is ok\r\n\r\nBlock<String> text\r\n    [\r\n        Number someValue = random.  # calling random block\r\n        someValue asString.\r\n].      # ERROR: indentation is erroneous...\r\n    ].  # ...this is ok\r\n```\r\n\r\nAll those blocks did not receive any parameter, to send a parameter you must define the block to receive it and then declare the parameters before using them, writing all parameters with their type, separating them with a comma and then ending the parameters list with a bar ('|') to delimit the beginning of the statements:\r\n```\r\n# 1 parameter\r\nBlock<Void, Number> aBlock\r\n    [ Number aNumber |\r\n        # code\r\n    ].\r\n\r\n# 2 parameters\r\nBlock<Void, Number, String> aBlock\r\n    [ Number aNumber, String aString |\r\n        # code\r\n    ].\r\n\r\n# 3 parameters\r\nBlock<Void, Number, String, Number> aBlock\r\n    [ Number aNumber, String aString, Number anotherNumber |\r\n        # code\r\n    ].\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}